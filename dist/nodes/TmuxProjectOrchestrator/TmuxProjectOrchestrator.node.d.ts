import type { IExecuteFunctions, INodeExecutionData, INodeType, INodeTypeDescription } from 'n8n-workflow';
import { TmuxBridge } from '../../utils/tmuxBridge';
export declare class TmuxProjectOrchestrator implements INodeType {
    private pathResolver;
    private static staticPathResolver;
    description: INodeTypeDescription;
    execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]>;
    static handleCreateProject(context: IExecuteFunctions, itemIndex: number, bridge: TmuxBridge): Promise<any>;
    static handleApprovePlan(context: IExecuteFunctions, itemIndex: number, bridge: TmuxBridge): Promise<any>;
    private static getQAIntegratedWindows;
    private static generateAIProjectPrompt;
    private static getQAEngineerBriefing;
    private static initializeAgentShells;
    private static setupQAGitHooks;
    private static validateProjectName;
    private static validateProjectPath;
    private static createSafeTempPath;
    private static safeTempFileWrite;
    private safeTempFileRead;
    static handleGetStatus(context: IExecuteFunctions, itemIndex: number, bridge: TmuxBridge): Promise<any>;
    static handleGenerateReport(context: IExecuteFunctions, itemIndex: number, bridge: TmuxBridge): Promise<any>;
    static handleScheduleTask(context: IExecuteFunctions, itemIndex: number, bridge: TmuxBridge): Promise<any>;
    static handleManageTeam(context: IExecuteFunctions, itemIndex: number, bridge: TmuxBridge): Promise<any>;
    private static addTeamMember;
    private static removeTeamMember;
    private static listTeamMembers;
    private static conductStandup;
    static handleRunQATests(context: IExecuteFunctions, itemIndex: number, bridge: TmuxBridge): Promise<any>;
    static handleApproveCommit(context: IExecuteFunctions, itemIndex: number, bridge: TmuxBridge): Promise<any>;
    static handleBlockCommit(context: IExecuteFunctions, itemIndex: number, bridge: TmuxBridge): Promise<any>;
    private static identifyAgentRole;
    private static generateStatusRecommendations;
    private static extractTestResults;
    private static extractGitActivity;
    private static calculateProductivity;
    private static generateProjectRecommendations;
    private static assessProjectRisks;
    private static getLastQAAction;
    private static assessTaskPriority;
    private static getWindowNameForRole;
    private static getRoleBriefing;
}
